{
	"info": {
		"_postman_id": "9490756e-eee6-41b1-88e8-da349059b4bf",
		"name": "hw5-marina",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create boat 1 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d405b61e-eab5-46ae-b059-2f69644f6f28",
						"exec": [
							"pm.environment.set(\"boat_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Fisherman Pro-3000\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Fishing boat\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(30);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"content is json\", function(){",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Fisherman Pro-3000\",\n\t\"type\": \"Fishing boat\",\n\t\"length\": 30\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create boat 1 400 Missing attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d405b61e-eab5-46ae-b059-2f69644f6f28",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 missing attribute\", function(){",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"junkboat\",\n\t\"type\": \"Fishing boat\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 415 invalid content type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ca95909-6303-4134-b0a7-a9b8290b97b0",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 invalid content type\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Server only accepts application/json data\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "text/html",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<h1>Hello World</h1>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 400 Invalid attributes",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2cc1d020-4d98-4bb6-8f2e-80ae103ce4f8",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 invalid attribute\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object contains attributes other than name, type, and length\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Fisherman3000\",\n\t\"type\": \"Fishing boat\",\n\t\"length\": 30,\n\t\"color\": \"brown\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 403 Duplicate name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d405b61e-eab5-46ae-b059-2f69644f6f28",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 duplicate name\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"A boat of the same name already exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Fisherman Pro-3000\",\n\t\"type\": \"Fishing boat\",\n\t\"length\": 30\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 400 Invalid name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d405b61e-eab5-46ae-b059-2f69644f6f28",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 invalid name\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The name is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"$junk?\",\n\t\"type\": \"Fishing boat\",\n\t\"length\": 30\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 400 Invalid type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d405b61e-eab5-46ae-b059-2f69644f6f28",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 invalid type\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The type is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Fisherman3000\",\n\t\"type\": \"/test^\",\n\t\"length\": 30\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 400 Invalid length",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d405b61e-eab5-46ae-b059-2f69644f6f28",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 invalid length\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The length is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Fisherman3000\",\n\t\"type\": \"Fishing boat\",\n\t\"length\": \"super long\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a boat 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d405b61e-eab5-46ae-b059-2f69644f6f28",
						"exec": [
							"pm.environment.set(\"boat_id2\", pm.response.json()[\"id\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Deluxe-Pro 5000\",\n\t\"type\": \"Yacht\",\n\t\"length\": 150\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boat 1 200 json",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "67cbe796-d12c-44fd-907a-57a3e8f8e291",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content matches boat1\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Fisherman Pro-3000\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Fishing boat\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(30);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"content is json\", function(){",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boat 1 200 html",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8b53f155-1af8-412d-b571-fa7a6b026d4c",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is html\", function () {",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include(\"text/html\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/html"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a boat 406 csv",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "518ec5cc-2739-4446-9184-656b0af2e6e7",
						"exec": [
							"pm.test(\"406 status code\", function () {",
							"    pm.response.to.have.status(406);",
							"});",
							"",
							"pm.test(\"406 unacceptable content type\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The requested content type is not available\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"type": "text",
						"value": "text/csv"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get boat with invalid id 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5539477a-9ff5-429b-979b-af285e94fa56",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH edit boat 1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f4d1db3d-5367-4438-94f8-dbb91759722f",
						"exec": [
							"pm.environment.set(\"boat_id1\", pm.response.json()[\"id\"]);",
							"",
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Fisherman Pro-3000\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Fishing boat\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(100);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"    pm.expect(pm.response.json()[\"self\"]).to.eq(self_url);",
							"});",
							"",
							"pm.test(\"content is json\", function(){",
							"   pm.expect(pm.response.headers.get('Content-Type')).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"length\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH edit boat 1 400 Invalid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f417ed6e-1148-4496-b377-53abc09b5775",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 invalid attribute\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object contains attributes other than name, type, and length\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"length\": 100,\n\t\"id\": \"junkid\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH edit boat 1 400 no valid attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e922a9e1-2018-4683-87dc-7b1cd14f79c5",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing a required attribute\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH edit boat 1 404 Invalid id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7a74f9c-2581-40ca-9996-ba107147f762",
						"exec": [
							"pm.test(\"404 not found\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"",
							"pm.test(\"404 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"No boat with this boat_id exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Odyssey II\",\r\n   \"type\": \"Mega Yatch\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{invalid_boat_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{invalid_boat_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PATCH edit boat 1 403 Duplicate name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7a74f9c-2581-40ca-9996-ba107147f762",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"403 duplicate name\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"A boat of the same name already exists\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Deluxe-Pro 5000\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				},
				"description": "Change boat 1's name to be the same as boat 2's"
			},
			"response": []
		},
		{
			"name": "PATCH edit boat 1 400 Invalid name",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7a74f9c-2581-40ca-9996-ba107147f762",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 invalid name\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The name is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"#bad_name&\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				},
				"description": "Change boat 1's name to be the same as boat 2's"
			},
			"response": []
		},
		{
			"name": "PATCH edit boat 1 400 Invalid type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7a74f9c-2581-40ca-9996-ba107147f762",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 invalid type\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The type is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"type\": \" bad_type&\"\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				},
				"description": "Change boat 1's name to be the same as boat 2's"
			},
			"response": []
		},
		{
			"name": "PATCH edit boat 1 400 Invalid length",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c7a74f9c-2581-40ca-9996-ba107147f762",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 invalid length\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The length is invalid\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"length\": 500000000000000\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				},
				"description": "Change boat 1's name to be the same as boat 2's"
			},
			"response": []
		},
		{
			"name": "PATCH edit a boat 415 invalid content type",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ca95909-6303-4134-b0a7-a9b8290b97b0",
						"exec": [
							"pm.test(\"415 status code\", function () {",
							"    pm.response.to.have.status(415);",
							"});",
							"",
							"pm.test(\"415 invalid content type\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Server only accepts application/json data\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "text/html"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "<h1>Hello World</h1>",
					"options": {
						"raw": {
							"language": "html"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT edit boat 303",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f1f76cfa-57a2-4618-843c-64dc00f0c9fb",
						"exec": [
							"pm.test(\"303 status code\", function () {",
							"    pm.response.to.have.status(303);",
							"});",
							"",
							"pm.test(\"Location in the header for the boat is correct\", function(){",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.environment.get(\"boat_id1\");",
							"   pm.expect(pm.response.headers.get('Location')).to.include(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Racer2000\",\n\t\"type\": \"Speed boat\",\n\t\"length\": 100\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				},
				"description": "PUT and PATCH requests to edit a boat are almost identical, except PUT requires all three attributes (name, type, length) and whose successful response has a status code of 303. Error cases are identical for both."
			},
			"response": []
		},
		{
			"name": "PUT edit boat 400 missing an attribute",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f791ee18-6d99-48f0-a539-bfe580671f16",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Racer2000\",\n\t\"type\": \"Speed boat\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request PUT /boats 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a34d417-a103-4bbc-bf24-a0a7f3be91c6",
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Request DELETE /boats 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a34d417-a103-4bbc-bf24-a0a7f3be91c6",
						"exec": [
							"pm.test(\"405 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat 1",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id1}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id1}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete boat 2",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat_id2}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat_id2}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all boats 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "00b996e8-52af-4a08-8ce2-22097177a90f",
						"exec": [
							"pm.test(\"There are no boats\", function(){",
							"  pm.expect(pm.response.json()[\"items\"].length).to.be.eq(0);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}